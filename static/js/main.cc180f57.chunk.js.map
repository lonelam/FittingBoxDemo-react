{"version":3,"sources":["common/Suitable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Suitable","props","containerBox","React","createRef","state","console","warn","this","trySuit","l","r","box","current","computed","getComputedStyle","overflow","style","overflowWrap","mid","fontSize","log","offsetHeight","scrollHeight","offsetWidth","scrollWidth","ref","className","width","widthInPx","height","heightInPx","children","Component","App","onTextAreaChange","$event","target","setState","contentText","value","onWidthChange","parseFloat","onHeightChange","onChange","htmlFor","type","id","min","max","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qRAQaA,G,YAAb,kDAIE,WAAYC,GAAwB,IAAD,8BACjC,cAAMA,IAHRC,aAAeC,IAAMC,YAInB,EAAKC,MAAQ,GAFoB,EAJrC,gEAUIC,QAAQC,KAAKC,KAAKC,aAVtB,2CAcIH,QAAQC,KAAKC,KAAKC,aAdtB,gFAqBI,IAAIC,EAAI,EAAGC,EAAI,IACTC,EAAMJ,KAAKN,aAAaW,QAC9B,IAAKD,EACH,OAAO,EAET,IAAME,EAAWC,iBAAiBH,GAOlC,IAN0B,WAAtBE,EAASE,WACXJ,EAAIK,MAAMD,SAAW,UAEO,eAA1BF,EAASI,eACXN,EAAIK,MAAMC,aAAe,cAEpBR,EAAI,IAAOC,GAAG,CACnB,IAAMQ,GAAOT,EAAIC,GAAK,EACtBC,EAAIK,MAAMG,SAAWD,EAAM,KAC3Bb,QAAQe,IAAIX,EAAGC,EAAGQ,EAAKP,EAAIU,aAAcV,EAAIW,aAAcX,EAAIY,YAAaZ,EAAIa,aAC5Eb,EAAIU,aAAeV,EAAIW,aACzBZ,EAAIQ,EAEJT,EAAIS,EAIR,OADAP,EAAIK,MAAMG,SAAWV,EAAI,MAClB,IA5CX,+BAgDI,OACE,yBAAKgB,IAAKlB,KAAKN,aAAcyB,UAAU,qBAAqBV,MAAO,CACjEW,MAAOpB,KAAKP,MAAM4B,UAAY,KAC9BC,OAAQtB,KAAKP,MAAM8B,WAAa,OAC9BvB,KAAKP,MAAM+B,cApDrB,GAA8B7B,IAAM8B,YCmDrBC,E,kDA/Cb,WAAYjC,GAAY,IAAD,8BACrB,cAAMA,IAQRkC,iBAAmB,SAACC,GAClB,IAAMC,EAA8BD,EAAOC,OAC3C,EAAKC,SAAS,CACZC,YAAaF,EAAOG,SAZD,EAgBvBC,cAAgB,SAACL,GACf,IAAMC,EAASD,EAAOC,OACtB,EAAKC,SAAS,CACZV,MAAOc,WAAWL,EAAOG,UAnBN,EAuBvBG,eAAiB,SAACP,GAChB,EAAKE,SAAS,CACZR,OAAQY,WAAWN,EAAOC,OAAOG,UAvBnC,EAAKnC,MAAQ,CACXkC,YAAa,muCACbX,MAAO,IACPE,OAAQ,KALW,E,qDA8BrB,OACE,yBAAKH,UAAU,OACb,6BACE,kBAAC,EAAD,CAAUI,WAAYvB,KAAKH,MAAMyB,OAAQD,UAAWrB,KAAKH,MAAMuB,OAAQpB,KAAKH,MAAMkC,cAEpF,6BACE,8BAAUK,SAAUpC,KAAK2B,iBAAkBK,MAAOhC,KAAKH,MAAMkC,eAE/D,6BACE,2BAAOM,QAAQ,SAAf,SAAoC,2BAAOC,KAAK,QAAQC,GAAG,QAAQC,IAAI,MAAMC,IAAI,OAAOT,MAAOhC,KAAKH,MAAMuB,MAAOgB,SAAUpC,KAAKiC,gBAChI,2BAAOI,QAAQ,UAAf,UAAsC,2BAAOC,KAAK,QAAQC,GAAG,SAASC,IAAI,MAAMC,IAAI,OAAOT,MAAOhC,KAAKH,MAAMyB,OAAQc,SAAUpC,KAAKmC,uB,GA1C5HxC,IAAM8B,WCEJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7D,QAAQ6D,MAAMA,EAAMC,c","file":"static/js/main.cc180f57.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Suitable.css';\r\n\r\nexport interface ISuitableProps {\r\n  widthInPx: number;\r\n  heightInPx: number;\r\n}\r\n\r\nexport class Suitable extends React.Component<ISuitableProps> {\r\n\r\n  containerBox = React.createRef<HTMLDivElement>();\r\n\r\n  constructor(props: ISuitableProps) {\r\n    super(props);\r\n    this.state = {}\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.warn(this.trySuit());\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    console.warn(this.trySuit());\r\n  }\r\n\r\n  componentWillUnmount() {\r\n  }\r\n\r\n  trySuit(): boolean {\r\n    let l = 1, r = 100;\r\n    const box = this.containerBox.current;\r\n    if (!box) {\r\n      return false;\r\n    }\r\n    const computed = getComputedStyle(box);\r\n    if (computed.overflow !== 'hidden') {\r\n      box.style.overflow = 'hidden';\r\n    }\r\n    if (computed.overflowWrap !== 'break-word') {\r\n      box.style.overflowWrap = 'break-word';\r\n    }\r\n    while (l + 0.01 < r) {\r\n      const mid = (l + r) / 2;\r\n      box.style.fontSize = mid + 'px'\r\n      console.log(l, r, mid, box.offsetHeight, box.scrollHeight, box.offsetWidth, box.scrollWidth);\r\n      if (box.offsetHeight < box.scrollHeight) {\r\n        r = mid;\r\n      } else {\r\n        l = mid;\r\n      }\r\n    }\r\n    box.style.fontSize = l + 'px'\r\n    return true;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div ref={this.containerBox} className=\"suitable-container\" style={{\r\n        width: this.props.widthInPx + 'px',\r\n        height: this.props.heightInPx + 'px'\r\n      }}>{this.props.children}</div>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport './App.css';\nimport { Suitable } from './common/Suitable';\n\ninterface IAppState {\n  contentText: string;\n  width: number;\n  height: number;\n}\n\nclass App extends React.Component<{}, IAppState> {\n\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      contentText: '鲁镇的酒店的格局，是和别处不同的：都是当街一个曲尺形的大柜台，柜里面预备着热水，可以随时温酒。做工的人，傍午傍晚散了工，每每花四文铜钱，买一碗酒，——这是二十多年前的事，现在每碗要涨到十文，——靠柜外站着，热热的喝了休息；倘肯多花一文，便可以买一碟盐煮笋，或者茴香豆，做下酒物了，如果出到十几文，那就能买一样荤菜，但这些顾客，多是短衣帮，大抵没有这样阔绰。只有穿长衫的，才踱进店面隔壁的房子里，要酒要菜，慢慢地坐喝。',\n      width: 100,\n      height: 200,\n    }\n  }\n\n  onTextAreaChange = ($event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const target: HTMLTextAreaElement = $event.target;\n    this.setState({\n      contentText: target.value\n    });\n  }\n\n  onWidthChange = ($event: React.ChangeEvent<HTMLInputElement>) => {\n    const target = $event.target;\n    this.setState({\n      width: parseFloat(target.value)\n    });\n  }\n\n  onHeightChange = ($event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      height: parseFloat($event.target.value)\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <Suitable heightInPx={this.state.height} widthInPx={this.state.width}>{this.state.contentText}</Suitable>\n        </div>\n        <div>\n          <textarea onChange={this.onTextAreaChange} value={this.state.contentText}></textarea>\n        </div>\n        <div>\n          <label htmlFor=\"width\">width</label><input type=\"range\" id=\"width\" min=\"100\" max=\"1000\" value={this.state.width} onChange={this.onWidthChange}></input>\n          <label htmlFor=\"height\">height</label><input type=\"range\" id=\"height\" min=\"100\" max=\"1000\" value={this.state.height} onChange={this.onHeightChange}></input>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}